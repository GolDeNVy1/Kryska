const { EmbedBuilder } = require('discord.js');

// –°–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã
module.exports = {
    name: 'interactionCreate',
    async execute(interaction, client) {
        const kazagumo = client.kazagumo;
        if (interaction.isCommand()) {
            const command = client.commands.get(interaction.commandName);

            if (!command) return;

            try {
                await command.execute(interaction, client);
            } catch (error) {
                console.log(error);
                await interaction.followUp({
                    content: '–£ –º–µ–Ω—è —Å–ª–æ–º–∞–ª–∞—Å—å –±–∞–ª–∞–ª–∞–π–∫–∞, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∫–∞ –º–Ω–µ –µ—ë –ø–æ—á–∏–Ω—è—Ç.',
                    ephemeral: true
                });
            }
        }

        // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        kazagumo.on('playerStart', (player) => {
            if (!player.previousTracks) {
                player.previousTracks = [];
            }
        });

        kazagumo.on('playerEnd', (player, track) => {
            if (!player.previousTracks) {
                player.previousTracks = [];
            }
            player.previousTracks.push(track);

        });

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        if (interaction.isButton()) {
            await interaction.deferReply({ ephemeral: true });
            const voiceChannel = interaction.member.voice.channel;
            if (!voiceChannel) return interaction.followUp({ content: '–ù–µ –≤–∏–∂—É —Ç–µ–±—è, –≥–¥–µ —Ç—ã?', ephemeral: true });            
            
            const kazagumo = client.kazagumo;
            const player = kazagumo.players.get(interaction.guildId);
            if (!player) return interaction.followUp({ content: '–ò–≥—Ä–∞—Ç—å –Ω–µ—á–µ–≥–æ!', ephemeral: true });

            const botVoiceChannel = player.voiceId;
            if (voiceChannel.id !== botVoiceChannel) return interaction.followUp({ content: '–Ø –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Å–µ–π—á–∞—Å!', ephemeral: true });

            switch (interaction.customId) {

                case 'pause_resume': {
                    if (!player.data.get("message")) {
                        const errorEmbed = new EmbedBuilder()
                            .setColor(0xFF0000)
                            .setTitle("‚ùå –û—à–∏–±–∫–∞")
                            .setDescription("–≠–º–±–µ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ –º–æ–≥—É –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ.");
                        return interaction.editReply({ embeds: [errorEmbed], ephemeral: true });
                    }
                
                    const message = player.data.get("message");
                    const pauseEmbed = EmbedBuilder.from(message.embeds[0]);
                
                    try {
                        if (player.paused) {
                            player.pause(false);
                            pauseEmbed.setAuthor({ name: 'üé∏ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!' });
                
                            const continueEmbed = new EmbedBuilder()
                                .setColor(0xA020F0)
                                .setTitle("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!")
                                .setDescription(`<@${interaction.user.id}> –û–∫–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!`)
                                .setFooter({
                                    text: `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${interaction.user.tag}`,
                                    iconURL: interaction.user.displayAvatarURL({ dynamic: true }),
                                });
                
                            await interaction.editReply({ embeds: [continueEmbed], ephemeral: true });
                        } else {
                            player.pause(true);
                            pauseEmbed.setAuthor({ name: '‚è∏Ô∏è –ü–∞—É–∑–∞' });
                
                            const pauseEmbedReply = new EmbedBuilder()
                                .setColor(0xA020F0)
                                .setTitle("‚è∏Ô∏è –ü–∞—É–∑–∞")
                                .setDescription(`<@${interaction.user.id}> –ü–æ–¥–æ–∂–¥–∞—Ç—å —Ç–µ–±—è, –¥–∞?`)
                                .setFooter({
                                    text: `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${interaction.user.tag}`,
                                    iconURL: interaction.user.displayAvatarURL({ dynamic: true }),
                                });
                
                            await interaction.editReply({ embeds: [pauseEmbedReply], ephemeral: true });
                        }
                
                        await message.edit({ embeds: [pauseEmbed] });
                    } catch (error) {
                        console.error(error);
                
                        const errorEmbed = new EmbedBuilder()
                            .setColor(0xFF0000)
                            .setTitle("‚ùå –û—à–∏–±–∫–∞")
                            .setDescription("–£ –º–µ–Ω—è —Å–ª–æ–º–∞–ª–∞—Å—å –±–∞–ª–∞–ª–∞–π–∫–∞, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.");
                
                        await interaction.editReply({ embeds: [errorEmbed], ephemeral: true });
                    }
                    break;
                }
                

                case 'skip': {
                    try {
                        if (player && player.queue && player.queue.length) {
                            const skippedTrack = player.queue.current ? player.queue.current.title : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–µ—Å–Ω—è';
                            await player.skip();
                
                            const skipEmbed = new EmbedBuilder()
                                .setColor(0xA020F0)
                                .setTitle("‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ!")
                                .setDescription(`–¢—Ä–µ–∫ **${skippedTrack}** –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω.`)
                                .setFooter({
                                    text: `–ü—Ä–æ–ø—É—Å—Ç–∏–ª: ${interaction.user.tag}`,
                                    iconURL: interaction.user.displayAvatarURL({ dynamic: true })
                                });
                
                            await interaction.editReply({ embeds: [skipEmbed], ephemeral: true });
                        } else {
                            const emptyQueueEmbed = new EmbedBuilder()
                                .setColor(0xFF0000)
                                .setTitle("‚ùå –û—à–∏–±–∫–∞")
                                .setDescription("–†–µ–ø–µ—Ä—Ç—É–∞—Ä –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å.");
                
                            await interaction.editReply({ embeds: [emptyQueueEmbed], ephemeral: true });
                        }
                    } catch (error) {
                        console.error(error);
                
                        const errorEmbed = new EmbedBuilder()
                            .setColor(0xFF0000)
                            .setTitle("‚ùå –û—à–∏–±–∫–∞")
                            .setDescription("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
                
                        await interaction.editReply({ embeds: [errorEmbed], ephemeral: true });
                    }
                    break;
                }
                

                case 'previous': {
                    try {
                        const previousTrack = player.getPrevious();
                        if (previousTrack) {
                            await player.play(player.getPrevious(true));
                
                            const previousTrackEmbed = new EmbedBuilder()
                                .setColor(0xA020F0)
                                .setTitle("‚èÆ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞")
                                .setDescription(`–¢–µ–ø–µ—Ä—å –∏–≥—Ä–∞–µ—Ç: **${previousTrack.title}**`)
                                .setFooter({
                                    text: `–ó–∞–ø—Ä–æ—Å–∏–ª: ${interaction.user.tag}`,
                                    iconURL: interaction.user.displayAvatarURL({ dynamic: true })
                                });
                
                            await interaction.editReply({ embeds: [previousTrackEmbed], ephemeral: true });
                        } else {
                            const noPreviousTrackEmbed = new EmbedBuilder()
                                .setColor(0xFF0000)
                                .setTitle("‚ùå –û—à–∏–±–∫–∞")
                                .setDescription("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–º–Ω—é, —á—Ç–æ –±—ã–ª–æ –¥–æ —ç—Ç–æ–≥–æ. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ!");
                
                            await interaction.editReply({ embeds: [noPreviousTrackEmbed], ephemeral: true });
                        }
                    } catch (error) {
                        console.error(error);
                
                        const errorEmbed = new EmbedBuilder()
                            .setColor(0xFF0000)
                            .setTitle("‚ùå –û—à–∏–±–∫–∞")
                            .setDescription("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
                
                        await interaction.editReply({ embeds: [errorEmbed], ephemeral: true });
                    }
                    break;
                }
                


                case 'stop': {
                    try {
                        const lastMessage = player.data.get("message");
                        if (lastMessage) {
                            try {
                                await lastMessage.delete();
                            } catch (error) {
                                console.error('Error deleting "Now Playing" message:', error);
                            }
                            player.data.delete("message");
                        }
                
                        player.destroy();
                
                        const stopEmbed = new EmbedBuilder()
                            .setColor(0xA020F0)
                            .setTitle("‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                            .setDescription("–ü–æ–∑–æ–≤—ë—Ç–µ, –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–µ—Ç —Å–∫—É—á–Ω–æ.")
                            .setFooter({
                                text: `–û—Å—Ç–∞–Ω–æ–≤–∏–ª: ${interaction.user.tag}`,
                                iconURL: interaction.user.displayAvatarURL({ dynamic: true })
                            });
                
                        await interaction.editReply({ embeds: [stopEmbed], ephemeral: true });
                    } catch (error) {
                        console.error(error);
                
                        const errorEmbed = new EmbedBuilder()
                            .setColor(0xFF0000)
                            .setTitle("–û—à–∏–±–∫–∞")
                            .setDescription("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                
                        await interaction.editReply({ embeds: [errorEmbed], ephemeral: true });
                    }
                    break;
                }
                

                case 'shuffle': {
                    try {
                        if (player.queue.length > 1) {
                            player.queue.shuffle();
                
                            const shuffleEmbed = new EmbedBuilder()
                                .setColor(0xA020F0)
                                .setTitle("üîÄ –†–µ–ø–µ—Ä—Ç—É–∞—Ä –ø–µ—Ä–µ–º–µ—à–∞–Ω!")
                                .setDescription("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –º—É–∑—ã–∫–æ–π –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.")
                                .setFooter({
                                    text: `–ü–µ—Ä–µ–º–µ—à–∞–ª: ${interaction.user.tag}`,
                                    iconURL: interaction.user.displayAvatarURL({ dynamic: true })
                                });
                
                            await interaction.editReply({ embeds: [shuffleEmbed], ephemeral: true });
                        } else {
                            const insufficientTracksEmbed = new EmbedBuilder()
                                .setColor(0xFF0000)
                                .setTitle("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–µ–∫–æ–≤")
                                .setDescription("–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤ –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä, —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å.");
                            await interaction.editReply({ embeds: [insufficientTracksEmbed], ephemeral: true });
                        }
                    } catch (error) {
                        console.error(error);
                
                        const errorEmbed = new EmbedBuilder()
                            .setColor(0xFF0000)
                            .setTitle("–û—à–∏–±–∫–∞")
                            .setDescription("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å –æ—á–µ—Ä–µ–¥—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                        await interaction.editReply({ embeds: [errorEmbed], ephemeral: true });
                    }
                    break;
                }
                

                case 'volume_down':
                    try {
                        player.volume = Math.max(0, player.volume - 10);

                        await player.setVolume(player.volume);

                        const successEmbed = new EmbedBuilder()
                            .setColor(0x00FF00)
                            .setTitle("üîâ –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞")
                            .setDescription(`–¢–µ–ø–µ—Ä—å –≥—Ä–æ–º–∫–æ—Å—Ç—å: ${player.volume}%`)
                            .setFooter({
                                text: `–ò–∑–º–µ–Ω–∏–ª: ${interaction.user.tag}`,
                                iconURL: interaction.user.displayAvatarURL({ dynamic: true })
                            });

                        await interaction.editReply({ embeds: [successEmbed], ephemeral: true });
                    } catch (error) {
                        const errorEmbed = new EmbedBuilder()
                            .setColor(0xFF0000)
                            .setTitle("‚ùå –û—à–∏–±–∫–∞")
                            .setDescription("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                        await interaction.editReply({ embeds: [errorEmbed], ephemeral: true });
                        console.error(error);
                    }
                    break;


                case 'volume_up':
                    try {
                        player.volume = Math.min(200, player.volume + 10);
                
                        await player.setVolume(player.volume);
                
                        const successEmbed = new EmbedBuilder()
                            .setColor(0x00FF00)
                            .setTitle("üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞")
                            .setDescription(`–¢–µ–ø–µ—Ä—å –≥—Ä–æ–º–∫–æ—Å—Ç—å: ${player.volume}%`)
                            .setFooter({
                                text: `–ò–∑–º–µ–Ω–∏–ª: ${interaction.user.tag}`,
                                iconURL: interaction.user.displayAvatarURL({ dynamic: true })
                            });
                
                        await interaction.editReply({ embeds: [successEmbed], ephemeral: true });
                    } catch (error) {
                        const errorEmbed = new EmbedBuilder()
                            .setColor(0xFF0000)
                            .setTitle("‚ùå –û—à–∏–±–∫–∞")
                            .setDescription("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                        
                        await interaction.editReply({ embeds: [errorEmbed], ephemeral: true });
                        console.error(error);
                    }
                    break;
                    

            default:
                    const defaultEmbed = new EmbedBuilder()
                        .setColor(0xFF0000)
                        .setTitle("‚ùå –û—à–∏–±–∫–∞")
                        .setDescription("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.")
                    await interaction.editReply({ embeds: [defaultEmbed], ephemeral: true });
                    break;
                
                case 'clear_queue':
                    if (player.queue.length > 0) {
                        player.queue.clear();
                        const clearQueueEmbed = new EmbedBuilder()
                            .setColor(0xFF0000)
                            .setTitle("üóëÔ∏è –†–µ–ø–µ—Ä—Ç—É–∞—Ä –æ—á–∏—â–µ–Ω!")
                            .setFooter({
                                text: `–ó–∞—Ö–æ—Ç–µ–ª: ${interaction.user.tag}`,
                                iconURL: interaction.user.displayAvatarURL({ dynamic: true })
                            });
                        await interaction.editReply({ embeds: [clearQueueEmbed], ephemeral: true });
                    } else {
                        const emptyQueueEmbed = new EmbedBuilder()
                            .setColor(0xFF0000)
                            .setTitle("–†–µ–ø–µ—Ä—Ç—É–∞—Ä —É–∂–µ –ø—É—Å—Ç.")
                            .setFooter({
                                text: `–ó–∞—Ö–æ—Ç–µ–ª: ${interaction.user.tag}`,
                                iconURL: interaction.user.displayAvatarURL({ dynamic: true })
                            });
                        await interaction.editReply({ embeds: [emptyQueueEmbed], ephemeral: true });
                    }
                    break;
                
                case 'repeat':
                    let repeatEmbed;
                    switch (player.loop) {
                        case 'none':
                            player.setLoop('track');
                            repeatEmbed = new EmbedBuilder()
                                .setColor(0x00FF00)
                                .setTitle("üîÇ –ü–æ–≤—Ç–æ—Ä—è—é –æ–¥–Ω—É –ø–µ—Å–Ω—é.")
                                .setFooter({
                                    text: `–ó–∞—Ö–æ—Ç–µ–ª: ${interaction.user.tag}`,
                                    iconURL: interaction.user.displayAvatarURL({ dynamic: true })
                                });
                            break;
                        case 'track':
                            player.setLoop('queue');
                            repeatEmbed = new EmbedBuilder()
                                .setColor(0x00FF00)
                                .setTitle("üîÅ –ü–æ–≤—Ç–æ—Ä—è—é –≤–µ—Å—å —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä.")
                                .setFooter({
                                    text: `–ó–∞—Ö–æ—Ç–µ–ª: ${interaction.user.tag}`,
                                    iconURL: interaction.user.displayAvatarURL({ dynamic: true })
                                });
                            break;
                        case 'queue':
                            player.setLoop('none');
                            repeatEmbed = new EmbedBuilder()
                                .setColor(0xFF0000)
                                .setTitle("‚ùå –ë–æ–ª—å—à–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é.")
                                .setFooter({
                                    text: `–ó–∞—Ö–æ—Ç–µ–ª: ${interaction.user.tag}`,
                                    iconURL: interaction.user.displayAvatarURL({ dynamic: true })
                                });
                            break;
                    }
                    await interaction.editReply({ embeds: [repeatEmbed], ephemeral: true });
                    break;
                        
                    


                case 'show_queue':
                    if (!player) {
                        return interaction.editReply({ 
                            content: '–ò–≥—Ä–∞—Ç—å –Ω–µ—á–µ–≥–æ!', 
                            ephemeral: true 
                        });
                    }
                    const userMention = `<@${interaction.user.id}>`;
                    const tracks = player.queue.slice(0, 30);
                    const queueEmbed = new EmbedBuilder()
                        .setColor(0xff6347)
                        .setTitle('üé∂ –ú–æ–π —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
                        .setThumbnail(player.queue.current.thumbnail || null)
                        .setDescription(
                            `**–°–µ–π—á–∞—Å –∏–≥—Ä–∞—é:**\n[${player.queue.current.title}](${player.queue.current.uri})\n\n**–ë—É–¥—É –∏–≥—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º:**`
                        )
                        .setFooter({ text: `–ü–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏: ${player.queue.length}` });

                    if (tracks.length === 0) {
                        queueEmbed.addFields({ 
                            name: '–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞', 
                            value: '–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø–µ—Å–Ω–∏!' 
                        });
                    } else {
                        const trackList = tracks.map((track, index) => {
                            const trackTitle = track.title.length > 35 
                                ? `${track.title.substring(0, 35)}...` 
                                : track.title;
                            return `\`${index + 1}.\` [${trackTitle}](${track.uri}) - ${track.author}: ${userMention}`;
                        });

                        let trackChunks = [];
                        let currentChunk = '';

                        trackList.forEach(line => {
                            if ((currentChunk + line + '\n').length <= 1024) {
                                currentChunk += line + '\n';
                            } else {
                                trackChunks.push(currentChunk);
                                currentChunk = line + '\n';
                            }
                        });

                        if (currentChunk) {
                            trackChunks.push(currentChunk);
                        }

                        trackChunks.forEach((chunk, index) => {
                            queueEmbed.addFields({
                                name: index === 0 ? '–û—á–µ—Ä–µ–¥—å:' : '‚Äé',
                                value: chunk,
                            });
                        });
                    }

                    return interaction.editReply({ 
                        embeds: [queueEmbed], 
                        ephemeral: true
                    });


            }
        }
    }
};


