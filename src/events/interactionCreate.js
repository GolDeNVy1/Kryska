const { Interaction } = require("discord.js");

// –°–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã
module.exports = {
    name: 'interactionCreate',
    async execute(interaction, client) {
        const kazagumo = client.kazagumo;
        if (interaction.isCommand()) {
            const command = client.commands.get(interaction.commandName);

            if (!command) return;

            try {
                await command.execute(interaction, client);
            } catch (error) {
                console.log(error);
                await interaction.followUp({
                    content: '–£ –º–µ–Ω—è —Å–ª–æ–º–∞–ª–∞—Å—å –±–∞–ª–∞–ª–∞–π–∫–∞, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∫–∞ –º–Ω–µ –µ—ë –ø–æ—á–∏–Ω—è—Ç.',
                    ephemeral: true
                });
            }
        }

        // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        kazagumo.on('playerStart', (player) => {
            if (!player.previousTracks) {
                player.previousTracks = [];
            }
        });

        kazagumo.on('playerEnd', (player, track) => {
            if (!player.previousTracks) {
                player.previousTracks = []; 
            }
            player.previousTracks.push(track); 
            
        });

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        if (interaction.isButton()) {
            await interaction.deferReply({ ephemeral: true });
            const voiceChannel = interaction.member.voice.channel;
            if (!voiceChannel) return interaction.followUp({ content: '–ù–µ –≤–∏–∂—É —Ç–µ–±—è, –≥–¥–µ —Ç—ã?', ephemeral: true });

            const kazagumo = client.kazagumo;
            const player = kazagumo.players.get(interaction.guildId);
            if (!player) return interaction.followUp({ content: '–ò–≥—Ä–∞—Ç—å –Ω–µ—á–µ–≥–æ!', ephemeral: true });

            const botVoiceChannel = player.voiceId;
            if (voiceChannel.id !== botVoiceChannel) return interaction.followUp({ content: '–Ø –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Å–µ–π—á–∞—Å!', ephemeral: true });

            switch (interaction.customId) {

                case 'pause_resume':
                    if (player.paused) {
                        player.pause(false);
                        await interaction.editReply({ content: '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!', ephemeral: true });
                    } else {
                        player.pause(true);
                        await interaction.editReply({ content: '‚è∏Ô∏è –ü–∞—É–∑–∞!', ephemeral: true });
                    }
                    break;

                case 'skip':
                    if (player && player.queue && player.queue.length) {
                        await player.skip();
                        await interaction.editReply({ content: '‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ!', ephemeral: true });
                    } else {
                        await interaction.editReply({ content: '–†–µ–ø–µ—Ä—Ç—É–∞—Ä –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å.', ephemeral: true });
                    }
                    break;

                case 'previous':
                       
                            
                    if (player.getPrevious()) {
                        await interaction.editReply({ content: `‚èÆ –í—Ä–æ–¥–µ-–±—ã –±—ã–ª —ç—Ç–æ—Ç, –¥–∞?: **${player.getPrevious().title}**`, ephemeral: true });
                        await player.play(player.getPrevious(true)); 
                    } else {
                        await interaction.editReply({ content: '–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–º–Ω—é –∫–∞–∫ –æ–Ω –∑–≤—É—á–∞–ª, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ!', ephemeral: true });
                    }
                        
                    break;
                    

                case 'stop':
                    const lastMessage = player.data.get("message");
                if (lastMessage) {
                    try {
                        await lastMessage.delete();
                    } catch (error) {
                        console.error('Error deleting "Now Playing" message:', error);
                    }
                    player.data.delete("message");
                }
                    player.destroy();
                        await interaction.editReply({ content: '‚èπÔ∏è –õ–∞–¥–Ω–æ, –ø–æ–∑–æ–≤—ë—Ç–µ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–∫—É—á–Ω–æ.', ephemeral: true });
                    break;

                case 'shuffle':
                    if (player.queue.length > 1) {
                        player.queue.shuffle();
                        await interaction.editReply({ content: 'üîÄ –†–µ–ø–µ—Ä—Ç—É–∞—Ä –ø–µ—Ä–µ–º–µ—à–∞–Ω!', ephemeral: true });
                    } else {
                        await interaction.editReply({ content: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è.', ephemeral: true });
                    }
                    break;

                case 'volume_down':
                    player.volume = Math.max(0, player.volume - 10);
                    await player.setVolume(player.volume);
                    await interaction.editReply({ content: `üîâ –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞: ${player.volume}%`, ephemeral: true });
                    break;

                case 'volume_up':
                    player.volume = Math.min(200, player.volume + 10);
                    await player.setVolume(player.volume);
                    await interaction.editReply({ content: `üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞: ${player.volume}%`, ephemeral: true });
                    break;

                default:
                    await interaction.editReply({ content: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.', ephemeral: true });
                    break;
            }
        }
    }
};


